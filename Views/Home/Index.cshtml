@using System.Globalization
@using ControleContas.ViewModels
@model HomeViewModel
@{
	ViewData["Title"] = "Dashboard";
}
<div class="row">
	<label id="id-boleto-selecionado" hidden></label>
	<label for="month" class="col-3 p-0">
		Mês
		<select asp-for="@Model.Month" class="form-select" id="month" aria-label="Selecione um mês">
			@for (var i = 1; i <= 12; i++)
			{
				<option value="@i">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
			}
		</select>
	</label>
	<label for="year" class="col-3 p-0">
		Ano
		<select asp-for="@Model.Year" class="form-select" id="year" aria-label="Selecione um ano">
			@for (var i = 2024; i <= 2026; i++)
			{
				<option value="@i">@i</option>
			}
		</select>
	</label>
	<label for="card" class="form-label col-3 p-0">
		Cartão
		<select asp-for="@Model.Cartao" class="form-select" id="card" aria-label="Selecione um Cartão">
			<option value="0">Todos</option>
			@foreach (var item in Model.Cards())
			{
				<option value="@item.Id">@item.Description</option>
			}
		</select>
	</label>
	<label for="user" class="form-label col-3 p-0">
		Usuário
		<select asp-for="@Model.Year" class="form-select" id="user" aria-label="Selecione um mês">
			@for (var i = 2024; i <= 2026; i++)
			{
				<option value="@i">@i</option>
			}
		</select>
	</label>
	
	<div class="col text-end p-0">
		<button class="btn btn-outline-primary" onclick="OnClickPesquisar(this)">
			Pesquisar
		</button>
	</div>
</div>
<div id="chart_div"></div>
<div>
	<div class="row">
		<div class="col-3 pt-4">
			<div class="card">
				<div class="card-body">
					<h5 class="card-title">Boletos</h5>
					<h6 class="card-subtitle mb-2 text-body-secondary">Total gasto</h6>
					<p class="card-text">@Model.TotalInstallmentBankSlip().ToString("N2", new CultureInfo("pt-BR"))</p>
					<a href="#" class="btn btn">Ver detalhes</a>
					<a href="#" class="card-link">Another link</a>
				</div>
			</div>
		</div>

		@foreach(var item in Model.Cards())
		{
		
		<div class="col-3 pt-4">
			<div class="card">
				<div class="card-body">
					<h5 class="card-title">@item.Description</h5>
					<h6 class="card-subtitle mb-2 text-body-secondary">Total gasto</h6>
						<p class="card-text">@Model.TotalInstallmentCard(item.Id).ToString("N2", new CultureInfo("pt-BR"))</p>
					<a href="#" class="btn btn">Ver detalhes</a>
					<a href="#" class="card-link">Another link</a>
				</div>
			</div>
		</div>
		}
		<h3>Total de gastos: @Model.TotalExpenses().ToString("N2", new CultureInfo("pt-BR"))</h3>
	</div>
</div>

@if (Model.InstallmentsBankSlip.Count() > 0)
{	
	<h3>Boletos</h3>
	
	<table class="table">
		<thead class="thead-dark">
			<tr>
				<th scope="col">Parcela</th>
				<th scope="col">Descrição</th>
				<th scope="col">Compra</th>
				<th scope="col">Vencimento</th>
				<th scope="col">Pago</th>
				<th class="text-end" scope="col">Valor</th>
				<th class="text-end" scope="col">Pagamento</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.InstallmentsBankSlip)
			{
				<tr>
					<th scope="row">@item.NumeberInstalment/@item.BankSlip.InstallmentQuantity</th>
					<td>@item.BankSlip.Description</td>
					<td>@item.BankSlip.Date.ToString("d")</td>
					<td>@item.Due.ToString("d")</td>
					@if (@item.IsPaid)
					{
						<td id="td-pago-@item.Id">Sim</td>
					}else
					{
						<td id="td-pago-@item.Id">Não</td>
					}					
					<td class="text-end">@item.Price.ToString("N2", new CultureInfo("pt-BR"))</td>
					<td class="text-end">
						<button type="button" onclick="OnClickOpenBoleto(this)" data-id-bolete="@item.Id" data-vencimento-bolete="@item.Due.ToString("d")" data-valor-bolete="@item.Price.ToString("F2")" class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#exampleModal">
						Pagar
					</button>
					</td>
				</tr>
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6" class="text-end">
					<span class="text-danger">@Model.TotalInstallmentBankSlip().ToString("N2", new CultureInfo("pt-BR"))</span>
				</td>
			</tr>
		</tfoot>
	</table>

}

@if (Model.Installments.Count() > 0)
{
	<h3>Cartão de credito</h3>
	<table class="table">
		<thead class="thead-dark">
			<tr>
				<th scope="col">Parcela</th>
				<th scope="col">Descrição</th>
				<th scope="col">Compra</th>
				<th scope="col">Vencimento</th>
				<th scope="col">Cartão</th>
				<th class="text-end" scope="col">Valor</th>
				<th class="text-end" scope="col">...</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.Installments)
			{
				<tr>
					<th scope="row">@item.NumeberInstalment/@item.Account.InstallmentQuantity</th>
					<td>@item.Account.Description</td>
					<td>@item.Account.Date.ToString("d")</td>
					<td>@item.Due.ToString("d")</td>
					<td>@item.Account.Card.Description</td>
					<td class="text-end">@item.Price.ToString("N2", new CultureInfo("pt-BR"))</td>
					<td class="text-end"><a class="btn btn-info" href="#">...</a></td>

				</tr>
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="6" class="text-end">
					<span class="text-danger">@Model.TotalInstallment().ToString("N2", new CultureInfo("pt-BR"))</span>
				</td>
			</tr>
		</tfoot>
	</table>

}


<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<!--<form id="form-update-payment" asp-action="UpdatePayment" asp-controller="Home" method="post" asp-route-name="Teste" asp-route-id="25">-->
		<form id="form-update-payment" asp-action="" asp-controller="" method="" asp-route-name="" asp-route-id="">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">Pagamento de boletos</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>

				<div class="row">
					<div class="container p-4 col-12">
						<input hidden type="text" data-id-parcela="" class="form-control" id="idInstallment">
						<p>Marcar boleto como pago ?</p>
					</div>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
					<button type="button" onclick="MarcarBoletoPago()" class="btn btn-success">Sim</button>
				</div>
			</div>
		</div>
	</form>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script>
	function OnClickPesquisar(event) {
		const inputMonth = document.getElementById('month');
		const inputYear = document.getElementById('year');
		const inputCard = document.getElementById('card');

		const urlParams = new URL(window.location);

		urlParams.searchParams.set('month', inputMonth.value);
		urlParams.searchParams.set('year', inputYear.value);
		urlParams.searchParams.set('card', inputCard.value);
		
		localStorage.setItem('dashboard-principal-mes', inputMonth.value);
		localStorage.setItem('dashboard-principal-ano', inputYear.value);
		localStorage.setItem('dashboard-principal-cartao', inputCard.value);
		
		window.location.href = urlParams;

	}

	function OnClickOpenBoleto(event)
	{
		document.getElementById("id-boleto-selecionado").textContent = event.getAttribute("data-id-bolete");
	}
	function MarcarBoletoPago() 
	{
		var id = document.getElementById("id-boleto-selecionado").textContent;
		var url = `http://localhost:84/api/Installment/UpdateIsPaid/${id}`		
		fetch(url, {
			method: 'PUT',
			mode: "cors",
			headers: {
				'Content-Type': 'application/json' // Informa que está enviando JSON			
			}
		}).then(response => {
			if (!response.ok) {
				console.log(response);
				alert(`Erro HTTP: ${response.status}`);
			}
			var modalEl = document.getElementById('exampleModal');
			var modal = bootstrap.Modal.getInstance(modalEl); // Obtém a instância do modal
			modal.hide();
		});
	}
	const inputMonth = document.getElementById('month');
	const inputYear = document.getElementById('year');
	const inputCard = document.getElementById('card');
	const today = new Date();
	const urlParams = new URLSearchParams(window.location.search);

	// Para acessar um parâmetro específico:
	var paramMonth = urlParams.get('month');
	var paramYear = urlParams.get('year');
	var paramCard = urlParams.get('card');

	if (paramMonth == null)
		paramMonth = localStorage.getItem('dashboard-principal-mes');
	if (paramYear == null)
		paramYear = localStorage.getItem('dashboard-principal-ano');
	if (paramCard == null)
		paramCard = localStorage.getItem('dashboard-principal-cartao');
	
	console.log("paramMonth: "+paramMonth);
	console.log("paramYear: "+paramYear);
	console.log("paramCard: "+paramCard);

	if (paramMonth == null)
		paramMonth = today.getMonth() + 1;
	if (paramYear == null)
		paramYear = today.getFullYear();
	if (paramCard == null)
		paramCard = 0;

	inputMonth.value = paramMonth;
	inputYear.value = paramYear;
	inputCard.value = paramCard;

	console.log("paramMonth 2: "+paramMonth);
	console.log("paramYear 2: "+paramYear);
	console.log("paramCard 2: "+paramCard);

	GetGrafico();
	function GetGrafico()
	{	
		var mes = localStorage.getItem('dashboard-principal-mes');
		var ano = localStorage.getItem('dashboard-principal-ano');
		var url = `http://192.168.1.24:84/api/Dashboard/Cartoes/${mes}/${ano}`;
		fetch(url, {
			method: 'GET',
			headers: {
				'Content-Type': 'application/json', // Informa que está enviando JSON
				'X-CSRF-TOKEN': document.querySelector('[name="__RequestVerificationToken"]').value // Para segurança (se estiver usando anti-CSRF no ASP.NET)
			}			
		}).then(response => {
			if (!response.ok) {
				throw new Error(`Erro HTTP: ${response.status}`);
			}
			return response.json(); // Converte a resposta para JSON
		})
			.then(data => {				
				if (data) {
					exibirGrafico(data);
				} else {
					alert('Erro: ' + data.mensagem);
				}
			})
			.catch(error => {
				console.error('Erro na requisição:', error);
				alert('Erro na requisição: ' + error.message);
			});
	

	}
	function exibirGrafico(dataJson){
	
		
		google.charts.load('current', {'packages':['corechart']});
		google.charts.setOnLoadCallback(drawChart);

		
		
		function drawChart() {

		  // Create the data table.
		  var data = new google.visualization.DataTable();
		  data.addColumn('string', 'Topping');
		  data.addColumn('number', 'Slices');
		  var arrayDados = [];
		  for (const item of dataJson) {
			  arrayDados.push([item.description, item.value]);
        	}
		  
		  data.addRows(arrayDados);
		var formatter = new google.visualization.NumberFormat({
			prefix: 'R$ ',
			decimalSymbol: ',',
			groupingSymbol: '.'
		});

	    formatter.format(data, 1);

		  var options = {'title':'Gastos com cartão',
						 'width':400,
						 'height':300};

		  // Instantiate and draw our chart, passing in some options.
		  var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
		  chart.draw(data, options);
		}
	
	}



</script>